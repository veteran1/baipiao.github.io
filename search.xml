<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>考研英语-词汇笔记（一）</title>
      <link href="2021/02/22/kao-yan-ying-yu-ci-hui-bi-ji-yi/"/>
      <url>2021/02/22/kao-yan-ying-yu-ci-hui-bi-ji-yi/</url>
      
        <content type="html"><![CDATA[<h2 id="前言（Unit-1）"><a href="#前言（Unit-1）" class="headerlink" title="前言（Unit 1）"></a>前言（Unit 1）</h2><br><pre class="line-numbers language-note" data-language="note"><code class="language-note">说实话，我的英语很不好，但有幸接触到刘晓艳老师的课程，我觉得讲的非常棒，妙趣横生。所以我想通过博客的形式，辅助自己记忆，同时记录一些自己的经验和心得。其实当我真正搞工程以后，才发现英语是多么重要。查资料充当其中，看代码看数据手册都离不开它。所以我痛定思痛，即使考研没考上，英语也得补上去。但我深知提升的过程是多么枯燥艰苦，但是我不气馁，祝自己2022考研上岸！先从英语开始！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h2 id="action"><a href="#action" class="headerlink" title="action"></a>action</h2><blockquote><p> n.行为；功能，作用 </p></blockquote><ul><li><p>Now,you can begin your action to remember these interesting words.<br>现在，你可以开始背有趣单词的行动啦！</p></li><li><p>the action of lung and liver<br>肺和肝的作用</p></li></ul><h2 id="activate"><a href="#activate" class="headerlink" title="activate"></a>activate</h2><blockquote><p>vt. 使活动，激活</p></blockquote><ul><li> I am activated to prepare the examination actively.<br>我要积极准备这次考试。</li><li>The dog was activated to bite the begger nearby.<br>这条狗瘦了刺激，去咬旁边的那个乞丐。</li></ul><pre class="line-numbers language-不择手段记单词" data-language="不择手段记单词"><code class="language-不择手段记单词">activity n.活动，活跃因此activate 可以理解为“使活动，激活”。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="ascend"><a href="#ascend" class="headerlink" title="ascend"></a>ascend</h2><blockquote><p>vi. 升高，上升</p></blockquote><ul><li>He watched the airplane ascending higher and higher.<br>他看见飞机飞的越来越高。</li></ul><blockquote><p>vt. 攀登，登上</p></blockquote><ul><li>A group of scientists are planning to ascend Mount Everset.<br>一群科学家正在计划攀登珠穆朗玛峰。</li></ul><pre class="line-numbers language-不择手段记单词" data-language="不择手段记单词"><code class="language-不择手段记单词">一再地（as-） + 走（ce），一再地朝上走，就是“升高；攀登”。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-反义词" data-language="反义词"><code class="language-反义词">descend     vi. 下来，下降The sun descend over the western hills.日落西山<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-扩展" data-language="扩展"><code class="language-扩展">descent    n.下降，降落The plane begain its descent to the airport.飞机开始降落到机场。descendant    n.子孙，后裔，后代 (从身上生下来的，是“子孙后代”)She is a direct descendant of Queen Victoria.她就是维多利亚女王的嫡系后代。offspring    n.（单复数同形）后代His offsping are diligent and intelligent.他的后代勤奋又聪明。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-真题" data-language="真题"><code class="language-真题">The grand mediocrity of today-everyone being the same in survival and number of offspring - means that natural selection has loat80% of its power in uper-middle-class India compared to the tribes.今天这种极其显著的平均化-每个人的生存机会和子女数量都相同-这意味着与印度部落相比，自然选择在印度中上层已经失去了80%的效力。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="attach"><a href="#attach" class="headerlink" title="attach"></a>attach</h2><blockquote><p>vt. 系，贴，附</p></blockquote><ul><li>I never attach myself to any big power.<br>我从来不依附任何强者。</li></ul><pre class="line-numbers language-不择手段记单词" data-language="不择手段记单词"><code class="language-不择手段记单词">一再地（at-） + 触摸（tach），一再地触摸 -&gt; 附上，粘着<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-派生" data-language="派生"><code class="language-派生">attachment    n.附件，附属物<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-反义词" data-language="反义词"><code class="language-反义词">detach    vt. 分开，分离<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 考研英语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8051ELL库介绍</title>
      <link href="2021/02/18/8051ell-ku-jie-shao/"/>
      <url>2021/02/18/8051ell-ku-jie-shao/</url>
      
        <content type="html"><![CDATA[<h2 id="8051-ELL函数库简介"><a href="#8051-ELL函数库简介" class="headerlink" title="8051 ELL函数库简介"></a>8051 ELL函数库简介</h2><br><p>ELL是<code>efficient low-layer</code>的缩写，意思是<code>高效低封装</code>，结合了<code>HAL库</code>和<code>LL库</code>的编程思想，既保证了通用性又降低了flash的过度占用。可谓是一举两得，高效、简洁、好用！<br><br></p><p>开发函数库，最初是为了满足我自己的生产需求，后来经过深思熟虑，我想做一个好用的通用库，所以把它开源出来，分享给广大工程师们。<br><br></p><p>函数库是基于Keil开发，支持Keil4和Keil5，支持Vscode协同开发，推荐使用EIDE插件。目前函数库主要适配了STC公司的单片机型号，以STC8系列为主。后续计划增加STC12、STC15、STC16系列。<br><br></p><h2 id="新手如何入门ELL函数库"><a href="#新手如何入门ELL函数库" class="headerlink" title="新手如何入门ELL函数库"></a>新手如何入门ELL函数库</h2><br><p>如果你明白了ELL函数库的架构，那么对你学习本库会有非常大的帮助！函数库采用了一个裸机框架来组织库文件。框架包括两大部分：<code>工程文件</code>和<code>库文件</code>。<br><br></p><p>工程文件主要存放<code>Keil工程</code>、<code>Vscode文件</code>、<code>用户代码</code>。这里可以根据你的编程习惯进行安排，非常的自由！库文件才是我们的重头戏，它主要分为四个部分：<code>核心文件夹</code>、<code>片内外设库</code>、<code>组件库</code>、<code>设备驱动库</code>。<br><br></p><pre class="line-numbers language-C" data-language="C"><code class="language-C">核心文件夹：存放各种MCU的寄存器头文件、函数库重定义数据类型头文件、函数库常用数据结构头文件片内外设库：存放MCU的片内外设模块，是库的主要构成单元。组件库：配套8051内核开发的好用组件，具有一定的抽象性和封装性，能加速项目的开发，比如TMT时间片任务进程组件。设备驱动库：一些常用的外围芯片、模块，通过统一的驱动框架进行封装，方便开发。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><p>下面是ELL函数库的框架图:<br><br></p><img src=" ../../../../images/8051_ell_lib/doc/ELL-framework.png" style="zoom:75%;" /><br><p>关键的是，我们该如何在工程里面使用函数库呢？我们提供了一个非常便捷的方法！我们拿STC8系列的ELL函数库举例，你只需要调用一个头文件<code>Lib_STC8x.h</code>，和配置一个头文件<code>Lib_CFG.h</code>。<br><br></p><p>通过配置<code>Lib_CFG.h</code>，可以实现对库裁剪和控制，定制适合你工程的函数库。而使用函数库内的API，只需要调用<code>8051_ELL_Lib.h</code>就可以了。</p><p>看到这里，如果你对本库产生了兴趣，可以通过下面下载:<br><br></p><blockquote><p><a href="https://gitee.com/zeweni/ELL-8051-LIB">gitee仓库  (需要注册账户下载，速度快)</a></p></blockquote><br><blockquote><p><a href="https://github.com/zewen-i/8051-ELL-LIB">github仓库   (可以直接下载，但速度慢)</a></p></blockquote><br><p>本库是开源项目，遵循 Apache 许可证 2.0 版本，可免费在商业产品中使用，不需要公布应用程序源码，没有潜在商业风险。<br><br></p><p>如果本项目对你有所帮助，可以通过下方的<code>赞赏</code>按钮，请我喝一杯咖啡！<br><br></p><blockquote><p>QQ技术交流群：1001220381</p></blockquote><br><p>我会在群里免费答疑和提供技术支持！</p><br>]]></content>
      
      
      <categories>
          
          <category> 8051 ELL函数库指南 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 8051MCU </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8051ELL库工程创建</title>
      <link href="2021/02/18/8051ell-ku-gong-cheng-chuang-jian/"/>
      <url>2021/02/18/8051ell-ku-gong-cheng-chuang-jian/</url>
      
        <content type="html"><![CDATA[<h2 id="工程框架介绍"><a href="#工程框架介绍" class="headerlink" title="工程框架介绍"></a>工程框架介绍</h2><br><p>ELL库使用的工程框架，是我从实验室一步一步更新迭代出来的，这套框架本身是一个裸机框架，但是稍作修改就能作为RTOS的BSP使用，整个框架的结构非常清晰透彻。如果你深入到工程文件去观察，会发现整个ELL函数库呈现金字塔状分布：</p><img src=" ../../../../images/8051_ell_lib/doc/8051-ELL函数库-金字塔组成.png" style="zoom:75%;" /><br><p>我们从下往上看，最底层有三个部分，分别是组件库、片内外设库、设备驱动库，这是我们“金字塔”的基石，ELL函数库的主要内容。<br><br></p><p>往上一层，是每一个库对应的头文件，这些头文件的作用是把三个库里面的模块文件连接起来。<br><br></p><p>再往上一层，是我们的配置头文件，这个文件比较特殊，需要我们自己实现，但是你不要担心，直接拷贝我们的模板工程里提供的就可以，在配置头文件里，主要修改库的一些属性和参数，比如指明我们使用的MCU型号，使能某些组件和设备驱动，这个头文件如果不加入到你的工程种，那么库将会按照默认的配置执行。<br><br></p><p>最上面一层，是我们整个ELL函数库的头文件，它的作用是吧所有模块链接起来，所以我们只要调用这一个头文件，就可以使用库里面的所用模块，当然有些功能需要在配置头文件里修改参数才能启动。<br><br></p><h2 id="框架设计哲学"><a href="#框架设计哲学" class="headerlink" title="框架设计哲学"></a>框架设计哲学</h2><br><p>在这里你可能有疑问，为什么我要设计一个这样的工程框架，或者说叫裸机框架（和RTOS的BSP做区分）？<br><br></p><p>我刚开始写代码的时候，都是一个头文件包罗万象，从到到尾全都丢在一起，方便又省事。但这样的结果，导致工程管理混乱，代码写得越多，一出问题就越难排查。<br><br></p><p>所以考虑到以上种种问题，在我的设想里，ELL函数库的每一个模块必须是独立的，各模块之间的耦合性要降到最低。在C语言里，管理模块之间的联系，最好的办法是通过头文件来实现，但这里我们要注意一些细节：</p><blockquote><p>头文件尽量不要重复包含。尽管我们有预编译指令<code>#ifndef</code>，但我还是建议从源头就规避，因为我们要考虑编译器是如何执行编译的，给编译器减轻负担，就是给我们提高编译效率和速度。</p></blockquote><blockquote><p>头文件的包含，一定要有层级概念。最好是一层一层的包含上去，最底层的不要包含最上层的头文件，就好比我们库金字塔结构的示意图，最下面一层的C文件里，不能包含最顶层库的头文件。这样设计的目的，是因为在Keil C51里，头文件任意包含会出现逻辑问题，导致编译失败，包含的头文件越多越复杂，越容易出现问题。</p></blockquote><br><p>除了头文件，我们对源文件也要采取一定的管理措施。对基本的就是高内聚低耦合，减少全局变量的使用，即使用到全局变量，也尽量缩小其作用域，限制在本模块以内。<br><br></p><p>如果遇到模块之间的配合调用，那么我们需要把相关信息封装在头文件内，如果需要跨文件调用函数，那么被调用的函数作用域要仅限在该函数以内。<br><br></p><h2 id="从零开始建工程"><a href="#从零开始建工程" class="headerlink" title="从零开始建工程"></a>从零开始建工程</h2><br><p>接下来我们讲工程的建立，这里的使用的方法，适用于所有的51单片机。正式开始之前，我先讲一些Keil C51的软件功能，帮大家补一些知识盲区和平常不注意的地方，这也是接下来建工程会用到的知识。<br><br></p><ul><li><strong>Keil C51 的版本问题</strong><br></li></ul><p>老工程师比较喜欢用Keil4，因为它简单易用。但Keil4有一些功能缺陷，尤其是代码编写方面，非常令人头疼。没有代码补全、中文字符字符编码容易乱码、稳定性差。我觉得稳定性不是Keil4的错，这要归结于操作系统的兼容性，很多老软件都有这种问题。<br><br></p><p>那Keil5就足够优秀了吗，不见得。依旧没有代码补全功能，因此在库开发，常遇到使用大量API函数时，对于没有代码补全的IDE来说，是非常麻烦的。<br><br></p><p>但是，作为一名好的工程师，我们的能力，就体现在把不好用的工具用好了！所以在正确看待IDE的不足以后，我们要好好珍惜那些它做的还不错的地方。<br><br></p><ul><li><strong>Keil C51 的预备知识</strong><br></li></ul><p>不管是Keil4 还是Keil5 我们都要搞明白，同一个版本有好几个类型的IDE，有面向8051的、有面向ARM的等等。对于我们8051为内核的MCU，我们要选择安装Keil C51这个类型的IDE。<br><br></p><p>安装Keil4和Keil5都可以，但是要注意，Keil4的版本尽量选择新一点，一定要包含LX51功能,如果你不知道如何选择，我给你推荐一个版本Keil C51 V901，可以加QQ群<code>1001220381</code>免费获取，Keil5的话就随你自己选择了,我们库开发使用的是 Keil C51 V960，加群同样可下载。<br><br></p><p>为什么一定要包含LX51功能？这就要讲一下Keil的编译需要那些模块来完成。</p><blockquote><ul><li>C51国际标准化C交叉编译器：<br>从8051C源代码产生可以重定位的目标模块</li></ul></blockquote><blockquote><ul><li>BL51连接器/定位器：<br>组合由C51和A51产生的可重定位的目标模块，产生绝对目标模块。 </li></ul></blockquote><blockquote><ul><li>A51宏编译器：<br>从8051汇编源代码代码产生就可以重定位的目标模块</li></ul></blockquote><blockquote><ul><li>OH51目标文件至Hex格式的转换器：<br>从绝对目标文件生成Hex文件</li></ul></blockquote><p>通过上述功能模块，就能实现Keil最基本的定位目标模块、链接、生成Hex烧录文件等编译流程。这其中的BL51、A51就是我们做学问的地方。一般情况下，Keil会把我们源文件内的所有代码都编译出来（预编译部分除外），但这会导致最后生成Hex文件过大。<br><br></p><p>有的人会选择把没用到的代码注释掉，来解决这个问题，但对于库开发来说，这样是出力不讨好的。解决办法也很简单，只需要在配置界面的【BL51 Misc】中<strong>Misc control</strong>框内输入:<code>NOOVERLAY</code>即可。<br><br></p><img src=" ../../../../images/8051_ell_lib/doc/BL51.jpg" style="zoom:75%;" /><br><p>然而，这样的效果并没有太好，编译后的Hex文件仍然不小。幸好Keil为我们提供了解决办法：</p><blockquote><ul><li>LX51连接器/定位器：<br>BL51的超集，提供更完善更优化的代码链接功能，生成的Hex文件大大减小（相比之下有8%的体积优化）。 </li></ul></blockquote><blockquote><ul><li>AX51宏编译器：<br>A51的超集，提供更完善更优化的代码编译功能，生成的Hex文件大大减小。</li></ul></blockquote><p>除此之外，<strong>LX51链接器</strong>最多可支持8 Mbytes的 代码和8 Mbytes的空间数据，能编译更大的源代码。<br><br></p><p>同时提供详细数据类型检查，在编译生成的所有程序目标中包含详细的信息(如变量、函数、函数的参数列表、单元、结构，等等)。 LX51链接器在目标模块中进行比较并报告任何不匹配。 这有助于在函数的声明或结构或变量中找到细微的错误。<br><br></p><p>尽管如此，我们还需要一点配置手段，才能让<strong>LX51链接器</strong>只编译我们调用过和相关联的代码。在配置界面的【LX51 Misc】中<strong>Misc control</strong>框内输入:<code>REMOVEUNUSED</code>即可。<br><br></p><img src=" ../../../../images/8051_ell_lib/doc/LX51.jpg" style="zoom:75%;" /><br><p>好了，在了解Keil如何编译工程以后，我们就可以开始建立工程了。这里提供三种方法，分别是Keil工程创建、VsCode协同开发、VsCode工程创建。你可以根据自己的喜好来选择，但不管怎么样，都需要你先创建一个Keil工程。</p><blockquote><p>Keil工程创建</p></blockquote><ul><li>准备工作：Keil4或Keil5、STC-ISP助手、8051 ELL函数库</li><li>优点：提供丰富细致的配置，完善的debug、仿真、烧录功能</li><li>缺点：没有代码补全，交互界面陈旧</li></ul><br><p>这里我选择Keil5，STC-ISP助手v6.88，如果你怕出现问题，就选择和我一样的版本,STC型号选择STC8A8K64S4A12。<br><br></p><p><strong>1. 安装STC的芯片包</strong><br><br></p><p>打开STC-ISP助手，选择<code>Keil仿真设置</code>，按照下图操作后，成功就会弹窗<code>STC MCU芯片型号添加成功！</code>。注意，选择Keil的根目录时，只要到最顶层的Keil路径就可以了。<br><br></p><img src=" ../../../../images/8051_ell_lib/doc/STC-ISP-device.jpg" style="zoom:75%;" /><br><p><strong>2. 创建Keil空白工程</strong><br><br></p><img src=" ../../../../images/8051_ell_lib/doc/Keil-project-1.jpg" style="zoom:75%;" /><br><p>在窗口里面选择一个路径，我这里选择桌面，并新建一个文件夹，命名为<code>Keil_Demo</code>。<br><img src=" ../../../../images/8051_ell_lib/doc/Keil-project-2.jpg" style="zoom:75%;" /><br><br></p><p>在gitee或者github仓库下载好ELL函数库，将<code>libraries</code>拷贝过来，同时新建一个文件夹，命名为<code>project</code>。</p><ul><li><a href="https://gitee.com/zeweni/ELL-8051-LIB">gitee仓库  (需要注册账户下载，速度快)</a></li><li><a href="https://github.com/zewen-i/8051-ELL-LIB">github仓库   (可以直接下载，但速度慢)</a></li></ul><img src=" ../../../../images/8051_ell_lib/doc/Keil-project-3-1.jpg" style="zoom:75%;" /><br><p>点击进入project文件夹，新建文件夹<code>build</code>用来存放编译文件，新建文件夹<code>main</code>用来存放MCU初始化文件、新建文件夹<code>app</code>用来我们自己写的代码。最后在输入框给工程起一个名称，这里命名为<code>Demo</code>，然后点击保存（图里面在后面建好了，这里先把文件夹都创建好）。</p><img src=" ../../../../images/8051_ell_lib/doc/Keil-project-3-2.jpg" style="zoom:75%;" /><br><p>Keil工程会跳出Device选择界面，按照下图操作：<br><img src=" ../../../../images/8051_ell_lib/doc/Keil-project-4.jpg" style="zoom:75%;" /><br><br></p><p>选择否，不需要添加汇编文件（这是一个启动文件，这里不需要）。<br><img src=" ../../../../images/8051_ell_lib/doc/Keil-project-5.jpg" style="zoom:75%;" /><br><br></p><p>点击左上方的魔术棒，我们来配置工程的基本属性，从左到右依次点击选项卡。先选择<code>Target</code>，按图进行配置。根据STC8A的内存容量，所以我们选择XDATA、64Kprogram。<br><img src=" ../../../../images/8051_ell_lib/doc/Keil-project-6.jpg" style="zoom:75%;" /><br><br></p><p>选择<code>output</code>，按图进行操作，要注意必须点击进<code>build</code>文件夹里面，这个路径设置才能生效，这一步主要是为了统一管理输出文件。最后设置好路径以后，别忘了勾选生成Hex文件的复选框。<br><img src=" ../../../../images/8051_ell_lib/doc/Keil-project-7.jpg" style="zoom:75%;" /><br><br></p><p>选择<code>Listing</code>，按图进行操作，同样选择<code>build</code>文件夹的路径，这样我们放在一起，不用额外一个文件夹了。<br><img src=" ../../../../images/8051_ell_lib/doc/Keil-project-8.jpg" style="zoom:75%;" /><br><br></p><p>选择<code>C51</code>，按图中所示步骤，将文件夹<code>libraries</code>下的文件夹路径添加进来，你可以点击这个图放大后进行对照操作，不要有所遗漏。<br><img src=" ../../../../images/8051_ell_lib/doc/Keil-project-9.jpg" style="zoom:75%;" /><br><br></p><p>选择<code>LX51 Misc</code>，在图中所示位置输入<code>REMOVEUNUSED</code>。<br><img src=" ../../../../images/8051_ell_lib/doc/Keil-project-10.jpg" style="zoom:75%;" /><br><br></p><p>选择<code>dewbug</code>,如果你暂时不需要外部硬件调试，可以跳过这一步，如果需要就按图设置，要注意这里还需要点击<code>setting</code>，如果你使用串口仿真调试，就选择对应的COM口，并把波特率设置为115200。<br><img src=" ../../../../images/8051_ell_lib/doc/Keil-project-11.jpg" style="zoom:75%;" /><br><br></p><p>点击左上方图中示意的图标，然后按图创建所示分支，并把每个分支下的内容添加进来，可以点击图片放大观看，方便对应。</p><blockquote><p>提示：如果你只需要片内外设库，那么只添加<code>lib/peripheral</code>下对应的C文件就好了。<br><img src=" ../../../../images/8051_ell_lib/doc/Keil-project-12.jpg" style="zoom:75%;" /><br><br></p></blockquote><p>回到主界面，我们双击左边栏目中的main选项分支，就可以添加文件，我们选择之前创建好的main文件夹，在里面创建<code>main.c</code>文件，并添加进来。<br><img src=" ../../../../images/8051_ell_lib/doc/Keil-project-13.jpg" style="zoom:75%;" /><br><br></p><p>在我们的gitee放库中，选择<code>projetc</code>-&gt;<code>STC8Ax</code>-&gt;<code>main</code>-&gt;<code>Lib_CFG.h</code>,拷贝到我们的main文件夹下，并把它添加进来。<br><img src=" ../../../../images/8051_ell_lib/doc/Keil-project-14.jpg" style="zoom:75%;" /><br><br></p><p>在main.c中编写如下代码,并点击左上方的<code>buiid</code>进行编译，如果出现图中端提示的内容，就证明你工程创建成功啦！</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &quot;8051_ELL_Lib.h&quot;int main(void)&#123;for(;;)&#123;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src=" ../../../../images/8051_ell_lib/doc/Keil-project-15.jpg" style="zoom:75%;" /><br><p>按照如上步骤，就可以创建一个ELL函数库工程，如果你不想如此繁琐的创建工程，只需要下载gitee或者github的仓库，里面有现成的Keil工程，直接在此基础上使用即可。</p><p>注意事项：</p><ul><li>工程下的文件，如果变动位置或者修改名称，都需要在Keil的配置界面<code>C51</code>中重新配置该文件或者文件的路径，同时在主界面左边的工程树中，重新导入修改的文件。</li></ul><blockquote><p>VsCode协同开发</p></blockquote><ul><li>准备工作：ELL函数Keil工程一份、VsoCode、VsCode C/C++插件、VsCode Keil Assistant插件</li><li>优点：提供代码补全功能，人机交互做的非常好</li><li>缺点：没有debug功能，需要配合Keil使用，需要通过Keil来向工程添加新的文件，</li></ul><br><p><strong>1. 安装VsCode 插件</strong><br><br></p><p>点击左边的<code>应用商店</code>，安装<code>C/C++</code>、<code>Chinese</code>、<code>Keil Assistant</code>。<br><img src=" ../../../../images/8051_ell_lib/doc/VsoCode-h-1.jpg" style="zoom:75%;" /><br><br></p><p><strong>2. 配置Keil Assistant插件</strong><br><br></p><p>点击<code>Keil Assistant</code>的设置图标,选择<code>扩展设置</code>。<br><img src=" ../../../../images/8051_ell_lib/doc/VsoCode-h-2.jpg" style="zoom:75%;" /><br><br></p><p>导入Keil的执行文件路径，注意路径最后面要加.exe。<br><img src=" ../../../../images/8051_ell_lib/doc/VsoCode-h-3.jpg" style="zoom:75%;" /><br><br></p><p><strong>3. 导入Keil工程，进行协同开发</strong><br><br></p><p>导入Keil工程所在的文件夹。<br><img src=" ../../../../images/8051_ell_lib/doc/VsoCode-h-4.jpg" style="zoom:75%;" /><br><br></p><p>通过图示，点击<code>+</code>按钮，将工程文件打开。注意，不能使用VsCode直接打开Keil工程文件，必须通过这个插件来打开。<br><img src=" ../../../../images/8051_ell_lib/doc/VsoCode-h-5.jpg" style="zoom:75%;" /><br><br></p><p>在Keil Assistant插件的页面，可以对工程进行预览、编译，如果你需要向工程添加文件，需要回到Keil里面操作，Debug也是。<br><img src=" ../../../../images/8051_ell_lib/doc/VsoCode-h-6.jpg" style="zoom:75%;" /><br><br></p><blockquote><p>VsCode工程创建</p></blockquote><ul><li>准备工作：ELL函数Keil工程一份、VsoCode、VsCode C/C++插件、Embedded IDE插件</li><li>优点：提供代码补全功能，人机交互做的非常好，提供多种工具链，可以修改工程，进行编译、调试</li><li>缺点：部分依赖Keil调试的芯片，没有debug功能</li></ul><p><strong>1. 安装VsCode 插件</strong><br><br></p><p>点击左边的<code>应用商店</code>，安装<code>C/C++</code>、<code>Chinese</code>、<code>Embedded IDE</code>。<br><img src=" ../../../../images/8051_ell_lib/doc/VsoCode-P-1.jpg" style="zoom:75%;" /><br><br></p><p><strong>2. 配置Embedded IDE插件</strong><br><br></p><img src=" ../../../../images/8051_ell_lib/doc/VsoCode-P-2.jpg" style="zoom:75%;" /><br><p>打开Keil的根目录，选择<code>TOOLS.INI</code>文件。<br><img src=" ../../../../images/8051_ell_lib/doc/VsoCode-P-3.jpg" style="zoom:75%;" /><br><br></p><p><strong>3. 导入Keil工程，生成EIDE工程</strong><br><br></p><p>按图所示，导入Keil工程。<br><img src=" ../../../../images/8051_ell_lib/doc/VsoCode-P-4.jpg" style="zoom:75%;" /><br><br></p><p>选择与Keil工程放在同一个文件夹下，方便管理项目。<br><img src=" ../../../../images/8051_ell_lib/doc/VsoCode-P-6.jpg" style="zoom:75%;" /><br><br></p><p>修改配置文件，因为我们的工程使用的是STC8A8K64S4A12，所以选择RAM大容量。<br><img src=" ../../../../images/8051_ell_lib/doc/VsoCode-P-6.jpg" style="zoom:75%;" /><br><br></p><p>编译工程，看到如下信息，就表示我们工程创建成功了。<br><img src=" ../../../../images/8051_ell_lib/doc/VsoCode-P-7.jpg" style="zoom:75%;" /><br><br></p><ul><li>补充：EIDE插件还支持SDCC 和stcgal，可以完全脱离Keil开发，如果你感兴趣可以尝试一下。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 8051 ELL函数库指南 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 8051MCU </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Altium Designer 20 笔记（一） 创建工程</title>
      <link href="2021/02/18/altium-designer-20-bi-ji-yi-ad-gong-cheng-zu-cheng-ji-chuang-jian/"/>
      <url>2021/02/18/altium-designer-20-bi-ji-yi-ad-gong-cheng-zu-cheng-ji-chuang-jian/</url>
      
        <content type="html"><![CDATA[<h2 id="Altium-Designer介绍"><a href="#Altium-Designer介绍" class="headerlink" title="Altium Designer介绍"></a>Altium Designer介绍</h2><p>Altium Designer 是原Protel软件开发商Altium公司推出的一体化的电子产品开发系统，主要运行在Windows操作系统。</p><p>这套软件通过把原理图设计、电路仿真、PCB绘制编辑、拓扑逻辑自动布线、信号完整性分析和设计输出等技术的完美融合，为设计者提供了全新的设计解决方案，使设计者可以轻松进行设计，熟练使用这一软件使电路设计的质量和效率大大提高。</p><h2 id="AD20-基本工程介绍"><a href="#AD20-基本工程介绍" class="headerlink" title="AD20 基本工程介绍"></a>AD20 基本工程介绍</h2><p>AD20的工程组成基本如下：</p><img src=" ../../../../images/ad20_note/note1/工程文件组成.jpg" style="zoom:50%;" /><p>一个工程最核心的文件是原理图和PCB，与其相搭配的是这两种文件对应的库，之后是各种生成文件。</p><h2 id="AD20-工程创建流程"><a href="#AD20-工程创建流程" class="headerlink" title="AD20 工程创建流程"></a>AD20 工程创建流程</h2><h5 id="首先，我们要创建一个空的工程项目"><a href="#首先，我们要创建一个空的工程项目" class="headerlink" title="首先，我们要创建一个空的工程项目"></a>首先，我们要创建一个空的工程项目</h5><p>选择 <code>文件</code> -&gt; <code>新的..</code> -&gt;  <code>项目</code></p><img src=" ../../../../images/ad20_note/note1/新建工程.jpg" style="zoom:50%;" /><h5 id="接着，我们要选择工程类型"><a href="#接着，我们要选择工程类型" class="headerlink" title="接着，我们要选择工程类型"></a>接着，我们要选择工程类型</h5><p>选择 <code>PCB</code> -&gt; <code>Default</code></p><img src=" ../../../../images/ad20_note/note1/工程类型页面.jpg" style="zoom:50%;" /><p>一般设计画电路板，我们选择PCB选项。点击到<code>PCB</code>这个选项展开，defult选项是由我们自建工程属性，其他的选项，是软件预先帮我们设计好的demo工程。</p><h5 id="给工程命名和设置存放路径"><a href="#给工程命名和设置存放路径" class="headerlink" title="给工程命名和设置存放路径"></a>给工程命名和设置存放路径</h5><p>选择 <code>PCB</code> -&gt; <code>Default</code></p><img src=" ../../../../images/ad20_note/note1/工程类型页面-配置属性.jpg" style="zoom:75%;" /><p>路径一定要重新设置，默认是指向AD的根目录或者默认的工作区的。</p><p>工程名字根据自己习惯命名。</p><h5 id="给工程创建原理图和库"><a href="#给工程创建原理图和库" class="headerlink" title="给工程创建原理图和库"></a>给工程创建原理图和库</h5><p>选择 <code>文件</code> -&gt; <code>新的..</code> -&gt; <code>库</code> -&gt; <code>原理图库</code> 和 <code>PCB元件库</code></p><p>选择 <code>文件</code> -&gt; <code>新的..</code> -&gt; <code>原理图</code> 和 <code>PCB</code></p><img src=" ../../../../images/ad20_note/note1/主页面-创建库.jpg" style="zoom:75%;" /><p>如果你有自己的库，可以先不创建库，直接创建原理图，后面再把库导入进来。PCB我们也可以不用先创建，画好原理图后，再创建也不迟。</p><p><strong>特别强调，每一个文件建好以后，都要保存 ctrl+s快捷键保存。</strong></p><p>文件保存的路径默认是工程的路径。</p><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><img src=" ../../../../images/ad20_note/note1/工程树.jpg" style="zoom:75%;" /><p>一般我们创建完毕工程以后，就是四个文件：<code>原理图</code>、<code>PCB</code>、<code>原理图库</code>、<code>PCB元件库</code>。后两个库如果有现成的，可以直接导入进来。</p><p>我们在初次创建工程的时候，可能遇到的问题有：</p><ul><li>工程路径没有设置好，导致下次找不到工程文件；</li><li>工程下的各文件是单独建立的，导致各文件没有产生正确的依赖关系，比如原理图无法更新到PCB中；</li><li>文件建立以后，没有及时保存，导致工程树中看不到。</li></ul>]]></content>
      
      
      <categories>
          
          <category> AD20使用指南 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PCB设计 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
