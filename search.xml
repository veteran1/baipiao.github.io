<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>8051ELL库介绍</title>
      <link href="2021/02/18/8051ell-ku-jie-shao/"/>
      <url>2021/02/18/8051ell-ku-jie-shao/</url>
      
        <content type="html"><![CDATA[<h2 id="8051-ELL函数库简介"><a href="#8051-ELL函数库简介" class="headerlink" title="8051 ELL函数库简介"></a>8051 ELL函数库简介</h2><br><p>ELL是<code>efficient low-layer</code>的缩写，意思是<code>高效低封装</code>，结合了<code>HAL库</code>和<code>LL库</code>的编程思想，既保证了通用性又降低了flash的过度占用。可谓是一举两得，高效、简洁、好用！<br><br></p><p>开发函数库，最初是为了满足我自己的生产需求，后来经过深思熟虑，我想做一个好用的通用库，所以把它开源出来，分享给广大工程师们。<br><br></p><p>函数库是基于Keil开发，支持Keil4和Keil5，支持Vscode协同开发，推荐使用EIDE插件。目前函数库主要适配了STC公司的单片机型号，以STC8系列为主。后续计划增加STC12、STC15、STC16系列。<br><br></p><h2 id="新手如何入门ELL函数库"><a href="#新手如何入门ELL函数库" class="headerlink" title="新手如何入门ELL函数库"></a>新手如何入门ELL函数库</h2><br><p>如果你明白了ELL函数库的架构，那么对你学习本库会有非常大的帮助！函数库采用了一个裸机框架来组织库文件。框架包括两大部分：<code>工程文件</code>和<code>库文件</code>。<br><br></p><p>工程文件主要存放<code>Keil工程</code>、<code>Vscode文件</code>、<code>用户代码</code>。这里可以根据你的编程习惯进行安排，非常的自由！库文件才是我们的重头戏，它主要分为四个部分：<code>核心文件夹</code>、<code>片内外设库</code>、<code>组件库</code>、<code>设备驱动库</code>。<br><br></p><pre class="line-numbers language-C" data-language="C"><code class="language-C">核心文件夹：存放各种MCU的寄存器头文件、函数库重定义数据类型头文件、函数库常用数据结构头文件片内外设库：存放MCU的片内外设模块，是库的主要构成单元。组件库：配套8051内核开发的好用组件，具有一定的抽象性和封装性，能加速项目的开发，比如TMT时间片任务进程组件。设备驱动库：一些常用的外围芯片、模块，通过统一的驱动框架进行封装，方便开发。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><p>下面是ELL函数库的框架图:<br><br></p><img src=" ../../../../images/8051_ell_lib/doc/ELL-framework.png" style="zoom:75%;" /><br><p>关键的是，我们该如何在工程里面使用函数库呢？我们提供了一个非常便捷的方法！我们拿STC8系列的ELL函数库举例，你只需要调用一个头文件<code>Lib_STC8x.h</code>，和配置一个头文件<code>Lib_CFG.h</code>。<br><br></p><p>通过配置<code>Lib_CFG.h</code>，可以实现对库裁剪和控制，定制适合你工程的函数库。而使用函数库内的API，只需要调用<code>8051_ELL_Lib.h</code>就可以了。顺便提一句，<code>Lib_CFG.h</code></p><p>看到这里，如果你对本库产生了兴趣，可以通过下面下载:<br><br></p><blockquote><p><a href="https://gitee.com/zeweni/ELL-8051-LIB">gitee仓库  (需要注册账户下载，速度快)</a></p></blockquote><br><blockquote><p><a href="https://github.com/zewen-i/8051-ELL-LIB">github仓库   (可以直接下载，但速度慢)</a></p></blockquote><br><p>本库是开源项目，遵循 Apache 许可证 2.0 版本，可免费在商业产品中使用，不需要公布应用程序源码，没有潜在商业风险。<br><br></p><p>如果本项目对你有所帮助，可以通过下方的<code>赞赏</code>按钮，请我喝一杯咖啡！<br><br></p><blockquote><p>QQ技术交流群：1001220381</p></blockquote><br><p>我会在群里免费答疑和提供技术支持！</p><br>]]></content>
      
      
      <categories>
          
          <category> 8051 ELL函数库指南 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 8051MCU </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8051ELL库工程创建</title>
      <link href="2021/02/18/8051ell-ku-gong-cheng-chuang-jian/"/>
      <url>2021/02/18/8051ell-ku-gong-cheng-chuang-jian/</url>
      
        <content type="html"><![CDATA[<h2 id="工程框架介绍"><a href="#工程框架介绍" class="headerlink" title="工程框架介绍"></a>工程框架介绍</h2><br><p>ELL库使用的工程框架，是我从实验室一步一步更新迭代出来的，这套框架本身是一个裸机框架，但是稍作修改就能作为RTOS的BSP使用，整个框架的结构非常清晰透彻。如果你深入到工程文件去观察，会发现整个ELL函数库呈现金字塔状分布：</p><img src=" ../../../../images/8051_ell_lib/doc/8051-ELL函数库-金字塔组成.png" style="zoom:75%;" /><br><p>我们从下往上看，最底层有三个部分，分别是组件库、片内外设库、设备驱动库，这是我们“金字塔”的基石，ELL函数库的主要内容。<br><br></p><p>往上一层，是每一个库对应的头文件，这些头文件的作用是把三个库里面的模块文件连接起来。<br><br></p><p>再往上一层，是我们的配置头文件，这个文件比较特殊，需要我们自己实现，但是你不要担心，直接拷贝我们的模板工程里提供的就可以，在配置头文件里，主要修改库的一些属性和参数，比如指明我们使用的MCU型号，使能某些组件和设备驱动，这个头文件如果不加入到你的工程种，那么库将会按照默认的配置执行。<br><br></p><p>最上面一层，是我们整个ELL函数库的头文件，它的作用是吧所有模块链接起来，所以我们只要调用这一个头文件，就可以使用库里面的所用模块，当然有些功能需要在配置头文件里修改参数才能启动。<br><br></p><h2 id="框架设计哲学"><a href="#框架设计哲学" class="headerlink" title="框架设计哲学"></a>框架设计哲学</h2><br><p>在这里你可能有疑问，为什么我要设计一个这样的工程框架，或者说叫裸机框架（和RTOS的BSP做区分）？<br><br></p><p>我之前在实验室待的时候，老师看我这么设计头文件，他头都看大了，他说自己写代码，都是一个头文件包罗万象，从到到尾全都丢在一起，方便又省事。我当时皱了皱眉毛，没有说话（不敢苟同）。<br><br></p><p>在我的设想里，ELL函数库的每一个模块必须是独立的，各模块之间的耦合性必须降到最低，管理模块之间的关系，在C语言里最好的办法就是通过头文件来实现，但是这里我们也要注意一些细节：</p><blockquote><p>头文件尽量不要重复包含。尽管我们有预编译指令<code>#ifndef</code>，但我还是建议从源头就规避，因为我们要考虑编译器是如何执行编译的，给编译器减轻负担，就是给我们提高编译效率和速度。</p></blockquote><blockquote><p>头文件的包含，一定要有层级概念。最好是一层一层的包含上去，最底层的不要包含最上层的头文件，就好比我们库金字塔结构的示意图，最下面一层的C文件里，不能包含最顶层库的头文件。这样设计的目的，是因为在Keil C51里，头文件任意包含会出现逻辑问题，导致编译失败，包含的头文件越多越复杂，越容易出现问题。</p></blockquote><h2 id="从零开始建工程"><a href="#从零开始建工程" class="headerlink" title="从零开始建工程"></a>从零开始建工程</h2><br><p>这里的工程建立方法，适用于所有的51单片机。我在正式开始建工程之前，先讲一些Keil C51软件功能，帮大家补一些知识盲区和平常不注意的地方，这也是接下来工程会用到的地方。<br><br></p><ul><li><strong>Keil C51 的版本问题</strong><br></li></ul><p>老工程师比较喜欢用Keil4，因为简单易用。但是Keil4有一些功能的缺陷，尤其是代码编写方面，非常令人头疼。首先想到的就是代码补全没有；再者就是字符编码，中文字符很容易乱码；还有就是稳定性，我觉得这个不是Keil4的错，而是操作系统的兼容性。有很多老的软件都有这种问题。<br><br></p><p>那Keil5就足够优秀了吗，不见得。代码补全功能依旧没有，所以库开发带来的大量API函数使用，对于没有代码补全的IDE来说，是非常致命的。<br><br></p><p>但是，作为一名好的工程师，我们的能力就体现在把不好用的工具用好了，用出花来！所以在正确看待IDE的不足以后，我们要好好珍惜它做的还不错的地方。<br><br></p><ul><li><strong>Keil C51 的预备知识</strong><br></li></ul><p>不管是Keil4 还是Keil5 我们都要搞明白，同一个版本有好几个类型的IDE，有面向8051的、有面向ARM的等等。对于我们8051为内核的MCU，我们要选择安装Keil C51这个类型的IDE。<br><br></p><p>安装Keil4和Keil5都可以，但是要注意，Keil4的版本尽量选择新一点，一定要包含LX51功能,如果你不知道如何选择，我给你推荐一个版本Keil C51 V901，可以加QQ群<code>1001220381</code>免费获取，Keil5的话就随你自己选择了,我们库开发使用的是 Keil C51 V960，加群同样可下载。<br><br></p><p>为什么一定要包含LX51功能？这就要讲一下Keil的编译步骤。</p>]]></content>
      
      
      <categories>
          
          <category> 8051 ELL函数库指南 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 8051MCU </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Altium Designer 20 笔记（一） 创建工程</title>
      <link href="2021/02/18/altium-designer-20-bi-ji-yi-ad-gong-cheng-zu-cheng-ji-chuang-jian/"/>
      <url>2021/02/18/altium-designer-20-bi-ji-yi-ad-gong-cheng-zu-cheng-ji-chuang-jian/</url>
      
        <content type="html"><![CDATA[<h2 id="Altium-Designer介绍"><a href="#Altium-Designer介绍" class="headerlink" title="Altium Designer介绍"></a>Altium Designer介绍</h2><p>Altium Designer 是原Protel软件开发商Altium公司推出的一体化的电子产品开发系统，主要运行在Windows操作系统。</p><p>这套软件通过把原理图设计、电路仿真、PCB绘制编辑、拓扑逻辑自动布线、信号完整性分析和设计输出等技术的完美融合，为设计者提供了全新的设计解决方案，使设计者可以轻松进行设计，熟练使用这一软件使电路设计的质量和效率大大提高。</p><h2 id="AD20-基本工程介绍"><a href="#AD20-基本工程介绍" class="headerlink" title="AD20 基本工程介绍"></a>AD20 基本工程介绍</h2><p>AD20的工程组成基本如下：</p><img src=" ../../../../images/ad20_note/note1/工程文件组成.jpg" style="zoom:50%;" /><p>一个工程最核心的文件是原理图和PCB，与其相搭配的是这两种文件对应的库，之后是各种生成文件。</p><h2 id="AD20-工程创建流程"><a href="#AD20-工程创建流程" class="headerlink" title="AD20 工程创建流程"></a>AD20 工程创建流程</h2><h5 id="首先，我们要创建一个空的工程项目"><a href="#首先，我们要创建一个空的工程项目" class="headerlink" title="首先，我们要创建一个空的工程项目"></a>首先，我们要创建一个空的工程项目</h5><p>选择 <code>文件</code> -&gt; <code>新的..</code> -&gt;  <code>项目</code></p><img src=" ../../../../images/ad20_note/note1/新建工程.jpg" style="zoom:50%;" /><h5 id="接着，我们要选择工程类型"><a href="#接着，我们要选择工程类型" class="headerlink" title="接着，我们要选择工程类型"></a>接着，我们要选择工程类型</h5><p>选择 <code>PCB</code> -&gt; <code>Default</code></p><img src=" ../../../../images/ad20_note/note1/工程类型页面.jpg" style="zoom:50%;" /><p>一般设计画电路板，我们选择PCB选项。点击到<code>PCB</code>这个选项展开，defult选项是由我们自建工程属性，其他的选项，是软件预先帮我们设计好的demo工程。</p><h5 id="给工程命名和设置存放路径"><a href="#给工程命名和设置存放路径" class="headerlink" title="给工程命名和设置存放路径"></a>给工程命名和设置存放路径</h5><p>选择 <code>PCB</code> -&gt; <code>Default</code></p><img src=" ../../../../images/ad20_note/note1/工程类型页面-配置属性.jpg" style="zoom:75%;" /><p>路径一定要重新设置，默认是指向AD的根目录或者默认的工作区的。</p><p>工程名字根据自己习惯命名。</p><h5 id="给工程创建原理图和库"><a href="#给工程创建原理图和库" class="headerlink" title="给工程创建原理图和库"></a>给工程创建原理图和库</h5><p>选择 <code>文件</code> -&gt; <code>新的..</code> -&gt; <code>库</code> -&gt; <code>原理图库</code> 和 <code>PCB元件库</code></p><p>选择 <code>文件</code> -&gt; <code>新的..</code> -&gt; <code>原理图</code> 和 <code>PCB</code></p><img src=" ../../../../images/ad20_note/note1/主页面-创建库.jpg" style="zoom:75%;" /><p>如果你有自己的库，可以先不创建库，直接创建原理图，后面再把库导入进来。PCB我们也可以不用先创建，画好原理图后，再创建也不迟。</p><p><strong>特别强调，每一个文件建好以后，都要保存 ctrl+s快捷键保存。</strong></p><p>文件保存的路径默认是工程的路径。</p><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><img src=" ../../../../images/ad20_note/note1/工程树.jpg" style="zoom:75%;" /><p>一般我们创建完毕工程以后，就是四个文件：<code>原理图</code>、<code>PCB</code>、<code>原理图库</code>、<code>PCB元件库</code>。后两个库如果有现成的，可以直接导入进来。</p><p>我们在初次创建工程的时候，可能遇到的问题有：</p><ul><li>工程路径没有设置好，导致下次找不到工程文件；</li><li>工程下的各文件是单独建立的，导致各文件没有产生正确的依赖关系，比如原理图无法更新到PCB中；</li><li>文件建立以后，没有及时保存，导致工程树中看不到。</li></ul>]]></content>
      
      
      <categories>
          
          <category> AD20使用指南 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PCB设计 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
